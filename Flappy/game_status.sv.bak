// this module checks if a pipe is cleared or if there was a collision
module game_status(clock, reset, bird_pos, pipe1, pipe2, height1, height2, size1, size2, increment, game_over);
  input logic [15:0][15:0] pipe1, pipe2;
  input logic clock, reset;
  input logic [3:0] bird_pos; // 4 bit bird height (0-15)
  input logic [2:0] height1, height2, size1, size2;
  
  output logic increment, game_over;
	
	always_ff @(psedge clock) begin 
	
	if(pipe1[0] == 16'b1000000000000000 | pipe2[0] == 16'b1000000000000000) begin
	  // if pipe has reached far left check bird index
	  if (((bird_pos >= height1) && bird_pos < (height1 + size1)) && ((bird_pos >= height2) && bird_pos < (height2 + size2))) begin
	    // clears both pipes
	    increment = 1'b1; // increment TRUE
		 game_over = 1'b0; // game_over FALSE 
	  end else begin
	    // hits a pipe
	    increment = 1'b0; // increment FALSE
		 game_over = 1'b1; // game over TRUE
	  end
	end
  end
 
endmodule



module game_status_Testbench();


endmodule

